#include <iostream> 
using namespace std;

template< typename I, int P, int Q>
struct Maxrix2
{
	I matrix[P][Q];
};

template<typename T, int N, int M>
class Matrix
{
private:
	T matrix[N][M];
	int m_n, m_m;

public:

	Matrix()
	{
		m_n = N;
		m_m = M;
		for (int i = 0; i < m_n; i++)
		{
			for (int j = 0; j < m_m; j++)
			{

				matrix[i][j] = 0;
			}
		}
	}
	Matrix(int y, int m)
	{
		
		m_n = y;
		m_m = m;
		for (int i = 0; i < m_n; i++) {
			for (int j = 0; j < m_m; j++) {
				matrix[i][j] = 0;
			}
		}
		cout << y << " " << m_n << "<><><><><>" << endl;
	}
	// копирование
	Matrix(const Matrix& other)
	{
		m_n = N;
		m_m = M;
		if (m_n == other.m_n || m_m == other.m_m)
		{
			for (int i = 0; i < m_n; i++)
			{
				for (int j = 0; j < m_m; j++)
				{

					matrix[i][j] = other.matrix[i][j];
				}
			}
		}
		else
		{
			cout << "Error Copy";
		}

	}
	~Matrix() = default;
	// оператор пpисваивания
	Matrix& operator=(Matrix& other)
	{
		m_n = N;
		m_m = M;
		if (m_n != other.m_n || m_m != other.m_m)
		{
			cout << "Error =";
		}
		else
		{
			for (int i = 0; i < m_n; i++)
			{
				for (int j = 0; j < m_m; j++)
				{
					swap(matrix[i][j], other.matrix[i][j]);
				}
			}
			return *this;
		}
	}
	// оператор +=
	Matrix& operator+=(Matrix& other)
	{
		m_n = N;
		m_m = M;
		if (m_n != other.m_n || m_m != other.m_m)
		{
			cout << "Error +=";
		}
		else
		{
			for (int i = 0; i < m_n; i++)
			{
				for (int j = 0; j < m_m; j++)
				{
					matrix[i][j] = other.matrix[i][j] + matrix[i][j];
				}
			}
			return *this;
		}
	}
	// оператор +
	Matrix operator+(Matrix& other)
	{
		m_n = N;
		m_m = M;
		Matrix matrix1;
		for (int i = 0; i < m_n; i++)
		{
			for (int j = 0; j < m_m; j++)
			{
				matrix1.matrix[i][j] = matrix[i][j] + other.matrix[i][j];
			}
		}
		return matrix1;
	}
	// оператор ++
	Matrix& operator++(int)
	{
		for (int i = 0; i < m_n; i++)
		{
			for (int j = 0; j < m_m; j++)
			{
				matrix[i][j]++;
			}
		}
		return *this;

	}
	// оператор *=
	template<typename I, int P, int Q>
	Matrix& operator *= (const Matrix<I, P, Q>& other)
	{
		Matrix sum(N, Q);
		cout << sum.m_n << " " << sum.m_m << " ------"<< endl;
		cout << N << " " << Q << " ------" << endl;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < Q; j++)
			{
				sum.matrix[i][j] = 0;
			}
		}
		//cout << M << " " << P << endl;
		if (M != P)
		{
			cout << "Error *="<<endl;
		}
		else
		{
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < Q; j++)
				{
					for (int k = 0; k < M; k++)
					{
						sum.matrix[i][j] += matrix[i][k] * other.getter(k, j);
						cout << sum.matrix[i][j] <<" = " << matrix[i][k] <<" * "<< other.getter(k, j) << endl;
						cout<< i << " " << j << " <- i j" << endl;
						cout << i << " " << k << " <- i k" << endl;
						cout << k << " " << j << " <- k j" << endl;
						cout << endl << endl << endl;
					}
				}
			}
			
			//cout << N << " " << Q << " NQ" << endl;
			m_n = N;
			m_m = Q;
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < Q; j++)
				{

					matrix[i][j] = sum.matrix[i][j];
					cout << matrix[i][j] << " ";
				}
				cout << endl;
			}
			//*this = sum;
		}
		
		return *this;
	}

	T getter(int i, int j) const
	{
		return matrix[i][j];
	}

	// опратор *
	template<typename I, int P, int Q>
	Matrix operator * (Matrix<I, P, Q> other)
	{
		Matrix result(N, Q);
		
		if (M != P)
		{
			cout << "Error *";
			return *this;

		}
		else
		{
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < Q; j++)
				{
					for (int k = 0; k < M; k++)
					{
						result.matrix[i][j] += matrix[i][k] * other.getter(k, j);
					}
				}
			}
			return result;
		}
	}
	// определитель
	double determinant()
	{
		m_n = N;
		m_m = M;
		double result = 0;
		if (m_n == 1 && m_m == 1)
		{
			return matrix[0][0];
		}
		if (m_n == 2 && m_m == 2)
		{
			result = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
		}

		return result;
	}
	// оператор получения и изменения элемента матрицы по индексу
	T& operator()(int i, int j)
	{
		return matrix[i][j];
	}
	friend istream& operator >> (istream& in, Matrix& MX)
	{
		for (int i = 0; i < MX.m_n; i++)
		{
			for (int j = 0; j < MX.m_m; j++)
			{
				in >> MX.matrix[i][j];
			}
		}
		return in;
	}

	friend ostream& operator << (ostream& out, const Matrix& MX)
	{
		cout << MX.m_n << " " << MX.m_m << " mn mm" << endl;
		for (int i = 0; i < MX.m_n; i++)
		{
			for (int j = 0; j < MX.m_m; j++)
			{
				out << MX.matrix[i][j] << " ";
			}
			cout << endl;
		}
		return out;
	}

};


int main()
{
	Matrix<int, 2, 1> M;
	Matrix<int, 1, 3> C;
	//Matrix<int, 2, 2> K;
	cin >> M;
	cin >> C;
	//cout << M;
	//cout << C;
	M *= C;
	//cout << M;
	system("pause");

}
